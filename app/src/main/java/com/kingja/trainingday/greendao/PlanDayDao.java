package com.kingja.trainingday.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kingja.trainingday.greendaobean.PlanDay;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_DAY".
*/
public class PlanDayDao extends AbstractDao<PlanDay, String> {

    public static final String TABLENAME = "PLAN_DAY";

    /**
     * Properties of entity PlanDay.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DayId = new Property(0, String.class, "dayId", true, "DAY_ID");
        public final static Property PlanId = new Property(1, String.class, "planId", false, "PLAN_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
    }


    public PlanDayDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_DAY\" (" + //
                "\"DAY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: dayId
                "\"PLAN_ID\" TEXT," + // 1: planId
                "\"DATE\" TEXT," + // 2: date
                "\"STATUS\" INTEGER NOT NULL );"); // 3: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_DAY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanDay entity) {
        stmt.clearBindings();
 
        String dayId = entity.getDayId();
        if (dayId != null) {
            stmt.bindString(1, dayId);
        }
 
        String planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindString(2, planId);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanDay entity) {
        stmt.clearBindings();
 
        String dayId = entity.getDayId();
        if (dayId != null) {
            stmt.bindString(1, dayId);
        }
 
        String planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindString(2, planId);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PlanDay readEntity(Cursor cursor, int offset) {
        PlanDay entity = new PlanDay( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dayId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // planId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.getInt(offset + 3) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanDay entity, int offset) {
        entity.setDayId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPlanId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PlanDay entity, long rowId) {
        return entity.getDayId();
    }
    
    @Override
    public String getKey(PlanDay entity) {
        if(entity != null) {
            return entity.getDayId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlanDay entity) {
        return entity.getDayId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
