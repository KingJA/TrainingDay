package com.kingja.trainingday.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kingja.trainingday.greendaobean.PlanClock;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_CLOCK".
*/
public class PlanClockDao extends AbstractDao<PlanClock, Long> {

    public static final String TABLENAME = "PLAN_CLOCK";

    /**
     * Properties of entity PlanClock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ClockId = new Property(0, Long.class, "clockId", true, "_id");
        public final static Property RemindTime = new Property(1, String.class, "remindTime", false, "REMIND_TIME");
        public final static Property RemindType = new Property(2, int.class, "remindType", false, "REMIND_TYPE");
        public final static Property RingName = new Property(3, String.class, "ringName", false, "RING_NAME");
        public final static Property RingPath = new Property(4, String.class, "ringPath", false, "RING_PATH");
    }


    public PlanClockDao(DaoConfig config) {
        super(config);
    }
    
    public PlanClockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_CLOCK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: clockId
                "\"REMIND_TIME\" TEXT," + // 1: remindTime
                "\"REMIND_TYPE\" INTEGER NOT NULL ," + // 2: remindType
                "\"RING_NAME\" TEXT," + // 3: ringName
                "\"RING_PATH\" TEXT);"); // 4: ringPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_CLOCK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanClock entity) {
        stmt.clearBindings();
 
        Long clockId = entity.getClockId();
        if (clockId != null) {
            stmt.bindLong(1, clockId);
        }
 
        String remindTime = entity.getRemindTime();
        if (remindTime != null) {
            stmt.bindString(2, remindTime);
        }
        stmt.bindLong(3, entity.getRemindType());
 
        String ringName = entity.getRingName();
        if (ringName != null) {
            stmt.bindString(4, ringName);
        }
 
        String ringPath = entity.getRingPath();
        if (ringPath != null) {
            stmt.bindString(5, ringPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanClock entity) {
        stmt.clearBindings();
 
        Long clockId = entity.getClockId();
        if (clockId != null) {
            stmt.bindLong(1, clockId);
        }
 
        String remindTime = entity.getRemindTime();
        if (remindTime != null) {
            stmt.bindString(2, remindTime);
        }
        stmt.bindLong(3, entity.getRemindType());
 
        String ringName = entity.getRingName();
        if (ringName != null) {
            stmt.bindString(4, ringName);
        }
 
        String ringPath = entity.getRingPath();
        if (ringPath != null) {
            stmt.bindString(5, ringPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlanClock readEntity(Cursor cursor, int offset) {
        PlanClock entity = new PlanClock( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // clockId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // remindTime
            cursor.getInt(offset + 2), // remindType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ringName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ringPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanClock entity, int offset) {
        entity.setClockId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemindTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRemindType(cursor.getInt(offset + 2));
        entity.setRingName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRingPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanClock entity, long rowId) {
        entity.setClockId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanClock entity) {
        if(entity != null) {
            return entity.getClockId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlanClock entity) {
        return entity.getClockId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
