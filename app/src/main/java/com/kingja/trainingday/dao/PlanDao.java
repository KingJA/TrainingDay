package com.kingja.trainingday.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kingja.trainingday.greendaobean.Plan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN".
*/
public class PlanDao extends AbstractDao<Plan, String> {

    public static final String TABLENAME = "PLAN";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PlanId = new Property(0, String.class, "planId", true, "PLAN_ID");
        public final static Property StartDate = new Property(1, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(2, String.class, "endDate", false, "END_DATE");
        public final static Property PlanDays = new Property(3, String.class, "planDays", false, "PLAN_DAYS");
        public final static Property PlanContent = new Property(4, String.class, "planContent", false, "PLAN_CONTENT");
    }


    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN\" (" + //
                "\"PLAN_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: planId
                "\"START_DATE\" TEXT," + // 1: startDate
                "\"END_DATE\" TEXT," + // 2: endDate
                "\"PLAN_DAYS\" TEXT," + // 3: planDays
                "\"PLAN_CONTENT\" TEXT);"); // 4: planContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        String planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindString(1, planId);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(2, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(3, endDate);
        }
 
        String planDays = entity.getPlanDays();
        if (planDays != null) {
            stmt.bindString(4, planDays);
        }
 
        String planContent = entity.getPlanContent();
        if (planContent != null) {
            stmt.bindString(5, planContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        String planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindString(1, planId);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(2, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(3, endDate);
        }
 
        String planDays = entity.getPlanDays();
        if (planDays != null) {
            stmt.bindString(4, planDays);
        }
 
        String planContent = entity.getPlanContent();
        if (planContent != null) {
            stmt.bindString(5, planContent);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // planId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // startDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // endDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // planDays
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // planContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setPlanId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStartDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEndDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlanDays(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlanContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Plan entity, long rowId) {
        return entity.getPlanId();
    }
    
    @Override
    public String getKey(Plan entity) {
        if(entity != null) {
            return entity.getPlanId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Plan entity) {
        return entity.getPlanId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
